You have n  tiles, where each tile has one letter tiles[i] printed on it.

Return the number of possible non-empty sequences of letters you can make using the letters printed on those tiles.

 

Example 1:

Input: tiles = "AAB"
Output: 8
Explanation: The possible sequences are "A", "B", "AA", "AB", "BA", "AAB", "ABA", "BAA".
Example 2:

Input: tiles = "AAABBC"
Output: 188
Example 3:

Input: tiles = "V"
Output: 1

SOL 1:::

Thoughts

input: AAB
count: A -> 2, B -> 1

For sequence of length 1:

We can pick either A, or B.
So we have "A", "B".
For sequence of length 2:

We build it based on "sequence of length 1"
For "A":
count: A -> 1, B -> 1
We can still pick either A, or B
So we have "AA", "AB"
For "B":
count: A -> 2, B -> 0
We can only pick A
So we have "BA"
For sequence of length 3: blablabla

class Solution {
public:
    int numTilePossibilities(string tiles) {
        
        //store the frequency of each character in tiles
        vector<int> freq(26,0);
        
        for(auto i:tiles)
            freq[i-'A']++;
        
        int res=0;
        solve(freq,res);
        return res;
    }
    void solve(vector<int>& freq,int& res)
    {
        //select every character available
        for(int i=0;i<26;i++)
        {
            if(freq[i])
            {
                res++;
                freq[i]--;
                solve(freq,res);
                freq[i]++;
            }
        }
    }
};
    
    arr[i]--; means we are using the i-th tile ('A'+i) as the current tile because there are still remaining ones.
sum++; means with these current tiles (not necessarily all the tiles given) we already have a valid combination.
sum += dfs(arr); means if we still want to add more tiles to the existing combination, we simply do recursion with the tiles left;
arr[i]++; is backtracking because we have finished exploring the possibilities of using the i-th tile and need to restore it and continue to explore other possibilities.

SOL 2:::

Letter tile posibilities
/*
                    h( AAB , -1 , 0 )              LEVEL=0 ie 0 length substring
                    /               \
            h('A'AB,0,1)           h('B'AA,6,1)    LEVEL=1 ie 1 length substrings ("A","B")
            /         \              /
        h('AA'B,1,2) h('AB'A,4,2) h('BA'A,7,2)     LEVEL=2 ie 2 length substrings ("AB","BA","AA")
        /            /             /
    h('AAB',2,3)    h('ABA',5,2)  h('BAA',8,3)     LEVEL=3 ie 3 length substrings 
                                                   ("AAB", "ABA", "BAA")
*/
class Solution {
    
    void backtrack(string tiles, int level, int &count)
    {
        count++;
        for(int i=level; i<tiles.length(); i++){
            
            if(i!=level && tiles[i]==tiles[level])
                continue;   // to skip same characters
            swap(tiles[i], tiles[level]);
            backtrack(tiles, level+1, count);
        }
    }
    
public:
    int numTilePossibilities(string tiles) {
        
        int count=-1;
        sort(tiles.begin(), tiles.end()); 
        
        backtrack(tiles, 0, count); //level = susbstring length
        
        return count;
    }
};


