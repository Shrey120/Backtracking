Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]

SOL:::

class Solution {
public:
    vector<vector<int>> ans;
    void cal(vector<int>& nums,int b)
    {
        if(b == nums.size())
        {
            ans.push_back(nums);
            return;
        }
        for(int i=b;i<nums.size();i++)
        {
            swap(nums[b],nums[i]);
            cal(nums,b+1);
            swap(nums[b],nums[i]);
        }
    }
    vector<vector<int>> permute(vector<int>& nums) 
    {
        cal(nums,0);
        return ans;
    }
};
