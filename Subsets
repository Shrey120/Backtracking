Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]

SOL ::::

class Solution {
public:
    vector<vector<int>> ans;
    void check(vector<int>& nums,vector<int> temp,int p)
    {
        if(p >= nums.size())
            return;
        
        for(int i=p;i<nums.size();i++)
        {
            temp.push_back(nums[i]);
            ans.push_back(temp);
            check(nums,temp,i+1);
            temp.pop_back();
        }
    }
    vector<vector<int>> subsets(vector<int>& nums)
    {
        vector<int> temp;
        ans.push_back(temp);
        check(nums,temp,0);
        return ans;
        
    }
};
